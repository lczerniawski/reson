name: Multi-Platform Build and Release

on:
  push:
    branches:
      - master

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_vars.outputs.version }}
      tag_version: ${{ steps.set_vars.outputs.tag_version }}
      binary_name: ${{ steps.set_vars.outputs.binary_name }}
      should_release: ${{ steps.set_vars.outputs.should_release }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set output variables
        id: set_vars
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          TAG_VERSION="v${VERSION}"
          BINARY_NAME=$(grep '^name = ' Cargo.toml | head -1 | sed 's/name = "\(.*\)"/\1/')

          if git rev-parse "refs/tags/$TAG_VERSION" >/dev/null 2>&1; then
            SHOULD_RELEASE="false"
          else
            SHOULD_RELEASE="true"
          fi

          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag_version=${TAG_VERSION}" >> "$GITHUB_OUTPUT"
          echo "binary_name=${BINARY_NAME}" >> "$GITHUB_OUTPUT"
          echo "should_release=${SHOULD_RELEASE}" >> "$GITHUB_OUTPUT"

      - name: Create Release Tag
        if: steps.set_vars.outputs.should_release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.set_vars.outputs.tag_version }} -m "Release ${{ steps.set_vars.outputs.tag_version }}"
          git push origin ${{ steps.set_vars.outputs.tag_version }}

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: Windows_x86_64
            extension: .exe
            use_cross: false

          - os: macos-latest
            target: x86_64-apple-darwin
            platform: Darwin_x86_64
            extension: ""
            use_cross: false

          - os: macos-latest
            target: aarch64-apple-darwin
            platform: Darwin_arm64
            extension: ""
            use_cross: false

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            platform: Linux_x86_64
            extension: ""
            use_cross: true

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            platform: Linux_aarch64
            extension: ""
            use_cross: true

          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            platform: Linux_armv7
            extension: ""
            use_cross: true

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross

      - name: Install zip (Windows)
        if: runner.os == 'Windows'
        run: choco install zip -y

      - name: Build (standard)
        if: "!matrix.use_cross"
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build (cross)
        if: matrix.use_cross
        run: cross build --release --target ${{ matrix.target }}
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"

      - name: Prepare distribution
        shell: bash
        run: |
          BINARY_NAME=${{ needs.check-version.outputs.binary_name }}
          VERSION=${{ needs.check-version.outputs.version }}
          PLATFORM=${{ matrix.platform }}
          TARGET=${{ matrix.target }}
          EXT="${{ matrix.extension }}"
          ARCHIVE_NAME="${BINARY_NAME}_${VERSION}_${PLATFORM}"

          mkdir -p dist
          cp "target/$TARGET/release/${BINARY_NAME}${EXT}" "dist/${BINARY_NAME}${EXT}"

          [[ "$PLATFORM" != *"Windows"* ]] && chmod +x "dist/${BINARY_NAME}${EXT}"

          cp README.md dist/ 2>/dev/null || true
          cp readme.md dist/ 2>/dev/null || true
          cp LICENSE dist/ 2>/dev/null || true

          cd dist
          if [[ "$PLATFORM" == *"Windows"* ]]; then
            zip -r "../$ARCHIVE_NAME.zip" .
          else
            tar -czf "../$ARCHIVE_NAME.tar.gz" .
          fi

          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.archive_name }}
          path: |
            ${{ env.archive_name }}.zip
            ${{ env.archive_name }}.tar.gz
          if-no-files-found: error

  create-release:
    needs: [check-version, build-and-release]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should_release == 'true'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release files
        run: |
          mkdir -p ./releases
          find ./artifacts -name "*.zip" -o -name "*.tar.gz" | xargs -I{} cp {} ./releases/

          cd ./releases
          echo "# Checksums for ${{ needs.check-version.outputs.binary_name }} v${{ needs.check-version.outputs.version }}" > ../checksums.txt
          echo "" >> ../checksums.txt
          sha256sum * >> ../checksums.txt

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.1.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
          head-ref: ${{ needs.check-version.outputs.tag_version }}
          base-ref: ${{ github.event.before }}

      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-version.outputs.tag_version }}
          name: Release ${{ needs.check-version.outputs.version }}
          body: |
            Release ${{ needs.check-version.outputs.version }}

            ## What's Changed
            ${{ steps.changelog.outputs.changelog }}

            ## Checksums
            ```
            $(cat checksums.txt)
            ```
          files: |
            ./releases/*
            ./checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
