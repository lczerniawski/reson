name: Multi-Platform Build and Release

on:
  push:
    branches:
      - master

jobs:
  # First job: Check version and create tag if needed
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_version: ${{ steps.version.outputs.tag_version }}
      binary_name: ${{ steps.binary.outputs.name }}
      should_release: ${{ steps.tag_check.outputs.should_release }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to check tags

      - name: Get version from Cargo.toml
        id: version
        run: |
          # Extract version from Cargo.toml
          VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Version from Cargo.toml: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Get binary name from Cargo.toml
        id: binary
        run: |
          # Extract binary name from Cargo.toml
          BINARY_NAME=$(grep '^name = ' Cargo.toml | head -1 | sed 's/name = "\(.*\)"/\1/')
          echo "Binary name: $BINARY_NAME"
          echo "name=$BINARY_NAME" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: tag_check
        run: |
          TAG_VERSION="v$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')"
          if git rev-parse "refs/tags/$TAG_VERSION" >/dev/null 2>&1; then
            echo "Tag $TAG_VERSION already exists, not creating a release."
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG_VERSION does not exist, proceeding with release."
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Release Tag
        if: steps.tag_check.outputs.should_release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.version.outputs.tag_version }} -m "Release ${{ steps.version.outputs.tag_version }}"
          git push origin ${{ steps.version.outputs.tag_version }}

  # Build for selected platforms (Windows x64, Linux x64, macOS x64/ARM64)
  build-standard:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    strategy:
      fail-fast: false # Continue with other builds if one fails
      matrix:
        include:
          # Windows x64 build
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: Windows_x86_64
            extension: .exe

          # macOS builds (x64 and ARM64)
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: Darwin_x86_64
            extension: ""

          - os: macos-latest
            target: aarch64-apple-darwin
            platform: Darwin_arm64
            extension: ""

          # Linux x64 build
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: Linux_x86_64
            extension: ""

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      # Building for the specified target
      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      # Create distribution package
      - name: Create distribution directory
        id: create_dist
        shell: bash
        run: |
          BINARY_NAME=${{ needs.check-version.outputs.binary_name }}
          VERSION=${{ needs.check-version.outputs.version }}
          PLATFORM=${{ matrix.platform }}
          TARGET=${{ matrix.target }}
          EXT="${{ matrix.extension }}"

          echo "Creating distribution for $BINARY_NAME v$VERSION ($PLATFORM)"

          # Create dist directory
          mkdir -p dist

          # Copy binary with correct extension
          cp "target/$TARGET/release/${BINARY_NAME}${EXT}" "dist/${BINARY_NAME}${EXT}"

          # Set execute permission for non-Windows
          if [[ "$PLATFORM" != *"Windows"* ]]; then
            chmod +x "dist/${BINARY_NAME}${EXT}"
          fi

          # Copy README and LICENSE if they exist
          if [ -f "README.md" ]; then
            cp "README.md" "dist/"
          fi
          if [ -f "LICENSE" ]; then
            cp "LICENSE" "dist/"
          fi

          # Create archive name
          ARCHIVE_NAME="${BINARY_NAME}_${VERSION}_${PLATFORM}"
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT

          # Create archive based on platform
          cd dist
          if [[ "$PLATFORM" == *"Windows"* ]]; then
            zip -r "../${ARCHIVE_NAME}.zip" ./*
          else
            tar -czf "../${ARCHIVE_NAME}.tar.gz" ./*
          fi
          cd ..

      # Upload Windows archives
      - name: Upload Windows archive
        if: contains(matrix.platform, 'Windows')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create_dist.outputs.archive_name }}.zip
          path: ${{ steps.create_dist.outputs.archive_name }}.zip
          retention-days: 1

      # Upload Linux/macOS archives
      - name: Upload Linux/macOS archive
        if: "!contains(matrix.platform, 'Windows')"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create_dist.outputs.archive_name }}.tar.gz
          path: ${{ steps.create_dist.outputs.archive_name }}.tar.gz
          retention-days: 1

  # Create the release with all archives
  create-release:
    needs: [check-version, build-standard]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded artifacts
        run: find . -type f | grep -v "\.git"

      - name: Generate checksums
        run: |
          echo "# Checksums for ${{ needs.check-version.outputs.binary_name }} v${{ needs.check-version.outputs.version }}" > checksums.txt
          echo "" >> checksums.txt
          find . -name "*.tar.gz" -o -name "*.zip" | sort | xargs sha256sum >> checksums.txt
          cat checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-version.outputs.tag_version }}
          name: Release ${{ needs.check-version.outputs.version }}
          body: |
            Release ${{ needs.check-version.outputs.version }}

            Commit message: ${{ github.event.head_commit.message }}

            ## Checksums
            ```
            $(cat checksums.txt)
            ```
          draft: false
          prerelease: false
          files: |
            **/*.tar.gz
            **/*.zip
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
