name: Multi-Platform Build and Release

on:
  push:
    branches:
      - master

jobs:
  # First job: Check version and create tag if needed
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_vars.outputs.version }}
      tag_version: ${{ steps.set_vars.outputs.tag_version }}
      binary_name: ${{ steps.set_vars.outputs.binary_name }}
      should_release: ${{ steps.set_vars.outputs.should_release }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to check tags

      - name: Set output variables
        id: set_vars
        run: |
          # Extract version from Cargo.toml
          VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Version from Cargo.toml: $VERSION"
          TAG_VERSION="v${VERSION}"

          # Extract binary name from Cargo.toml
          BINARY_NAME=$(grep '^name = ' Cargo.toml | head -1 | sed 's/name = "\(.*\)"/\1/')
          echo "Binary name: $BINARY_NAME"

          # Check if tag exists
          if git rev-parse "refs/tags/$TAG_VERSION" >/dev/null 2>&1; then
            echo "Tag $TAG_VERSION already exists, not creating a release."
            SHOULD_RELEASE="false"
          else
            echo "Tag $TAG_VERSION does not exist, proceeding with release."
            SHOULD_RELEASE="true"
          fi

          # Use the new environment file approach
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag_version=${TAG_VERSION}" >> "$GITHUB_OUTPUT"
          echo "binary_name=${BINARY_NAME}" >> "$GITHUB_OUTPUT"
          echo "should_release=${SHOULD_RELEASE}" >> "$GITHUB_OUTPUT"

      - name: Create Release Tag
        if: steps.set_vars.outputs.should_release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.set_vars.outputs.tag_version }} -m "Release ${{ steps.set_vars.outputs.tag_version }}"
          git push origin ${{ steps.set_vars.outputs.tag_version }}

  # Build for selected platforms (Windows x64, Linux x64, macOS x64/ARM64)
  build-standard:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    strategy:
      fail-fast: false # Continue with other builds if one fails
      matrix:
        include:
          # Windows x64 build
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: Windows_x86_64
            extension: .exe

          # macOS builds (x64 and ARM64)
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: Darwin_x86_64
            extension: ""

          - os: macos-latest
            target: aarch64-apple-darwin
            platform: Darwin_arm64
            extension: ""

          # Linux x64 build
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            platform: Linux_x86_64
            extension: ""

          # Linux ARM build
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            platform: Linux_aarch64
            extension: ""

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Install musl-tools (Linux)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Setup Rust target (Linux)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          rustup target add x86_64-unknown-linux-musl

      # Install zip on Windows
      - name: Install zip on Windows
        if: contains(matrix.platform, 'Windows')
        run: |
          choco install zip -y

      - name: Install cross-compilation tools
        if: contains(matrix.target, 'arm')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            musl-tools
          rustup target add armv7-unknown-linux-musleabihf
          rustup target add aarch64-unknown-linux-musl

          # Create symbolic links for musl builds
          sudo ln -s /usr/bin/aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-musl-gcc
          sudo ln -s /usr/bin/arm-linux-gnueabihf-gcc /usr/bin/arm-linux-musleabihf-gcc

      # Building for the specified target
      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-musl-gcc
          CARGO_TARGET_ARMV7_UNKNOWN_LINUX_MUSLEABIHF_LINKER: arm-linux-musleabihf-gcc
          CC_aarch64_unknown_linux_musl: aarch64-linux-musl-gcc
          CC_armv7_unknown_linux_musleabihf: arm-linux-musleabihf-gcc

      # Create distribution package
      - name: Create distribution directory
        run: |
          BINARY_NAME=${{ needs.check-version.outputs.binary_name }}
          VERSION=${{ needs.check-version.outputs.version }}
          PLATFORM=${{ matrix.platform }}
          TARGET=${{ matrix.target }}
          EXT="${{ matrix.extension }}"

          echo "Creating distribution for $BINARY_NAME v$VERSION ($PLATFORM)"

          # Create dist directory
          mkdir -p dist

          # Copy binary with correct extension
          cp "target/$TARGET/release/${BINARY_NAME}${EXT}" "dist/${BINARY_NAME}${EXT}"

          # Set execute permission for non-Windows
          if [[ "$PLATFORM" != *"Windows"* ]]; then
            chmod +x "dist/${BINARY_NAME}${EXT}"
          fi

          # Copy README and LICENSE if they exist
          if [ -f "README.md" ]; then
            cp "README.md" "dist/"
          elif [ -f "readme.md" ]; then
            cp "readme.md" "dist/"
          fi
          if [ -f "LICENSE" ]; then
            cp "LICENSE" "dist/"
          fi

          # Create archive name
          ARCHIVE_NAME="${BINARY_NAME}_${VERSION}_${PLATFORM}"
          echo "archive_name=${ARCHIVE_NAME}" >> "$GITHUB_ENV"

          # Create archive based on platform
          cd dist
          if [[ "$PLATFORM" == *"Windows"* ]]; then
            zip -r "../${ARCHIVE_NAME}.zip" ./*
          else
            tar -czf "../${ARCHIVE_NAME}.tar.gz" ./*
          fi
          cd ..
        shell: bash

      # Upload archives as artifacts
      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.archive_name }}
          path: |
            ${{ env.archive_name }}.zip
            ${{ env.archive_name }}.tar.gz
          if-no-files-found: error

  # Create the release with all archives
  create-release:
    needs: [check-version, build-standard]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Move archives to root directory
        run: |
          mkdir -p ./releases
          find ./artifacts -name "*.zip" -o -name "*.tar.gz" | xargs -I{} cp {} ./releases/
          ls -la ./releases

      - name: Generate checksums
        run: |
          cd ./releases
          echo "# Checksums for ${{ needs.check-version.outputs.binary_name }} v${{ needs.check-version.outputs.version }}" > ../checksums.txt
          echo "" >> ../checksums.txt
          sha256sum *.tar.gz *.zip >> ../checksums.txt
          cat ../checksums.txt

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.1.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
          head-ref: ${{ needs.check-version.outputs.tag_version }}
          base-ref: ${{ github.event.before }}

      - name: Get previous tag
        id: previoustag
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          echo "tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-version.outputs.tag_version }}
          name: Release ${{ needs.check-version.outputs.version }}
          body: |
            Release ${{ needs.check-version.outputs.version }}

            ## What's Changed
            ${{ steps.changelog.outputs.changelog }}

            ## Checksums
            ```
            $(cat checksums.txt)
            ```
          draft: false
          prerelease: false
          files: |
            ./releases/*.tar.gz
            ./releases/*.zip
            ./checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
